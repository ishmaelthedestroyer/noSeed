{
  "name": "grunt-todos",
  "description": "Grunt plugin for finding todos/fixmes in code",
  "version": "0.2.0",
  "homepage": "https://github.com/kevinlacotaco/grunt-todos",
  "author": {
    "name": "Kevin Lakotko",
    "email": "klakotko@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kevinlacotaco/grunt-todos.git"
  },
  "bugs": {
    "url": "https://github.com/kevinlacotaco/grunt-todos/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/kevinlacotaco/grunt-todos/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "async": "~0.2.9",
    "underscore": "~1.5.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "todos"
  ],
  "readme": "# grunt-todos\n\n> Grunt plugin for finding todos/fixmes in code\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-todos --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-todos');\n```\n\n## The \"todos\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `todos` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  todos: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.priorities\nType: `Object`\nDefault value: `{ low : /TODO/, med : /FIXME/, high : null }`\n\nAn object that specifies what the various priorities are for the target.\nHigh will add to the errorCount.\n\n\n#### options.verbose\nType: `Boolean`\nDefault value: `true`\n\nVerbose mode will cause the plugin to report on every file, regardless if there are actual lines to report or not. If set to false, only files with todos will be mentioned.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to find all the TODOs and FIXMEs in the code.\n\n```js\ngrunt.initConfig({\n  todos: {\n    options: {},\n    src : ['src/testing', 'src/123']\n  }\n})\n```\n\n#### Custom Options\n\nIn this example, custom options are used to escalate TODO to med priority.\n\n```js\ngrunt.initConfig({\n  todos: {\n    options: {\n        priorities : {\n            low : null,\n            med : /(TODO|FIXME)/\n        }\n    },\n    src : ['src/testing', 'src/123']\n  }\n})\n```\n\nIn this example, we want minimize the total output by setting `verbose` to false.\n\n```js\ngrunt.initConfig({\n  todos: {\n    options: {\n        verbose: false\n    },\n    src : ['src/**/*.js']\n  }\n})\n```\n\n### Custom Reporters\n\nA custom reporter can be used to change the output of the task.\n\nReporters have three functions, `header`, `fileTasks`, and `footer`, that should return strings.\nThe result of `header` is printed once at the beginning of the task.\nThe result of `footer` is printed once at the end of the task.\nThe `fileTasks` function is called once for each file that is being scanned.\n\nPrinting to the console or to a file is still controlled by the use of the `src` versus `files` options.\n\n```js\ngrunt.initConfig({\n  todos: {\n    options: {\n      reporter: {\n        header: function () {\n          return '-- Begin Task List --\\n';\n        },\n        fileTasks: function (file, tasks, options) {\n          var result = '';\n          result += 'For ' + file + '\\n';\n          tasks.forEach(function (task) {\n            result += '[' + task.lineNumber + ' - ' + task.priority + '] ' + task.line + '\\n';\n          });\n          result += '\\n';\n          return result;\n        },\n        footer: function () {\n          return '-- End Task List--\\n';\n        }\n      }\n    }\n  }\n})\n```\n\n#### `file` Parameter\nType: `String`\nThe path to the file being scanned for tasks.\n\n#### `tasks` Parameter\nType: `Array`\nContains the list of tasks found in the file.\n\nAn example `tasks` looks like this:\n\n```js\n{\n  file: 'path/to/file.js',\n  lineNumber: 27,\n  priority: 'low', // 'med' or 'high'\n  line: '    // TODO something grand and spectacular',\n  pattern: /\\bTODO\\b/ // Pattern used to recognize the priority\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-todos@0.2.0",
  "_from": "grunt-todos@~0.2.0"
}
